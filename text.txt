extends KinematicBody2D

const UP_DIRECTION := Vector2.DOWN

export var speed := 600.0
export var waterResistance := 600.0
export var gravity := 4000.0
export var max_jump := 1000.0
export var jump_multi := 2.0

var jumps_made := 0
var velocity := Vector2.ZERO # Geschwindigkeit
var jump_height := 0


export var fallMultiplier = 2 
export var lowJumpMultiplier = 10 
export var jumpVelocity = 400 #Jump height


#func _physics_process(delta):
#
#	#Applying gravity to player
#	velocity.y -= gravity 
#
#	#Jump Physics
#	if velocity.y > 0: #Player is falling
#		velocity += Vector2.DOWN * (-9.81) * (fallMultiplier) #Falling action is faster than jumping action | Like in mario
#
#	elif velocity.y < 0 && Input.is_action_just_released("ui_accept"): #Player is jumping 
#		velocity += Vector2.DOWN * (-9.81) * (lowJumpMultiplier) #Jump Height depends on how long you will hold key
#
#	if is_on_floor():
#		if Input.is_action_just_pressed("ui_accept"): 
#			velocity = Vector2.DOWN * jumpVelocity #Normal Jump actio
#
#	velocity = move_and_slide(velocity, UP_DIRECTION) 

func _physics_process(delta: float) -> void:
	var dir = position.direction_to(get_viewport().get_mouse_position())


	velocity.y = velocity.y - gravity * delta # do gravity always

	if is_on_floor():
		velocity.x = 0
	else:
		if velocity.x > 0:
			velocity.x = velocity.x - waterResistance * delta
		elif velocity.x < 0:
			velocity.x = velocity.x + waterResistance * delta
	if Input.is_action_pressed("jump"):
		jump_height += jump_multi
		print(jump_height)
	
	if Input.is_action_just_released("jump"):
		velocity.x = velocity.x + dir.x * speed
		velocity.y = velocity.y + jump_height*speed
		jump_height = 0
	velocity = move_and_slide(velocity, UP_DIRECTION)
